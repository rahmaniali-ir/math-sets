{"version":3,"sources":["providers/global.tsx","components/collectionSet/CollectionSet.tsx","components/collections/Collections.tsx","components/icon/iconPack.ts","components/icon/Icon.tsx","components/chips/Chips.tsx","components/matrix/Matrix.tsx","components/diagram/Diagram.tsx","components/selectRelation/SelectRelation.tsx","components/relation/Relation.tsx","components/relations/Relations.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["global","collections","elements","name","relations","source","target","nodes","getCollectionIndex","state","findIndex","collection","getRelationIndex","relation","reducer","action","type","charSet","usedChars","map","length","char","Math","floor","random","includes","generateUniqueCollectionLetter","newCollection","collectionIndex","payload","newElements","input","split","e","trim","filter","allElements","duplicatesFiltered","Array","from","Set","newCollections","index","toUpperCase","some","collectionLetterExists","_","element","rel","node","generateUniqueRelationLetter","relIndex","newRelations","coll","d","r","exists","globalContext","createContext","dispatch","useGlobal","useContext","GlobalProvider","children","useReducer","Provider","value","CollectionSet","inputRef","useRef","useEffect","current","onNameChange","useCallback","key","onAdd","onRemoveCollection","onRemoveElement","className","maxLength","defaultValue","onKeyUp","ref","onClick","Collections","addCollection","pack","symmetry","grid","plus","Icon","icon","useMemo","__html","dangerouslySetInnerHTML","Chips","text","title","Matrix","domain","range","changed","useState","hovered","setHovered","onMouseHover","onMouseLeave","onToggle","h","getRelation","rd","rr","main","di","ri","onMouseEnter","PI2","PI","getRandom","offset","max","min","Diagram","canvasRef","find","ctx","getContext","textAlign","textBaseline","font","canvas","height","width","fillStyle","fillRect","forEach","i","x","radius","y","beginPath","arc","closePath","stroke","fillText","column","columnPadding","verticalCenter","sourceFloor","targetFloor","ellipse","to","headLength","theta","leftDeg","rightDeg","dx","dy","moveTo","lineTo","angle","atan2","h1x","cos","h1y","sin","h2x","h2y","pointTo","SelectRelation","open","setOpen","selected","setSelected","sort","a","b","window","addEventListener","onClickInside","stopPropagation","toggleOpen","onSelect","Relation","setSource","setTarget","domainSet","rangeSet","isFilled","onSourceChange","onTargetChange","onMatrixToggle","Relations","addRelation","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4cd15b75.chunk.js","sourcesContent":["import { createContext, useContext, useReducer } from \"react\"\nimport { Collection } from \"../interfaces/collection\"\nimport { OrderedPair } from \"../interfaces/relation\"\nimport { GlobalAction, GlobalReducer, GlobalState } from \"./global.types\"\n\n// state\nconst global: GlobalState = {\n  collections: [\n    {\n      elements: [\"a\", \"b\", \"c\"],\n      name: \"A\",\n    },\n    {\n      elements: [\"1\", \"2\", \"3\", \"4\"],\n      name: \"B\",\n    },\n  ],\n  relations: [\n    {\n      name: \"R\",\n      source: \"A\",\n      target: \"B\",\n      nodes: [],\n    },\n  ],\n}\n\nconst generateUniqueCollectionLetter = (state: GlobalState) => {\n  const charSet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  const usedChars = state.collections.map(collection => collection.name)\n\n  if (usedChars.length === charSet.length) return \"\"\n\n  do {\n    const char = charSet[Math.floor(Math.random() * charSet.length)]\n    if (!usedChars.includes(char)) return char\n  } while (true)\n}\n\nconst generateUniqueRelationLetter = (state: GlobalState) => {\n  const charSet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  const usedChars = state.relations.map(relation => relation.name)\n\n  if (usedChars.length === charSet.length) return \"\"\n\n  do {\n    const char = charSet[Math.floor(Math.random() * charSet.length)]\n    if (!usedChars.includes(char)) return char\n  } while (true)\n}\n\nconst collectionLetterExists = (state: GlobalState, name: string) => {\n  return state.collections.some(collection => collection.name === name)\n}\n\nconst getCollectionIndex = (state: GlobalState, name: string) => {\n  return state.collections.findIndex(collection => collection.name === name)\n}\n\nconst getRelationIndex = (state: GlobalState, name: string) => {\n  return state.relations.findIndex(relation => relation.name === name)\n}\n\n// reducer\nconst reducer = (state: GlobalState, action: GlobalAction): GlobalState => {\n  switch (action.type) {\n    case \"ADD_COLLECTION\": {\n      const name = generateUniqueCollectionLetter(state)\n      if (!name) return state\n\n      const newCollection: Collection = { name, elements: [] }\n\n      return { ...state, collections: [...state.collections, newCollection] }\n    }\n\n    case \"ADD_TO_COLLECTION\": {\n      const collectionIndex = getCollectionIndex(\n        state,\n        action.payload.collection\n      )\n\n      const newElements = action.payload.input\n        .split(\",\")\n        .map((e: string) => e.trim())\n        .filter((e: string) => e)\n\n      const allElements = [\n        ...state.collections[collectionIndex].elements,\n        ...newElements,\n      ]\n      const duplicatesFiltered = Array.from(new Set(allElements))\n\n      const newCollections: Collection[] = state.collections.map(\n        (collection, index) => {\n          if (index === collectionIndex) {\n            collection.elements = duplicatesFiltered\n          }\n          return collection\n        }\n      )\n\n      return {\n        ...state,\n        collections: newCollections,\n      }\n    }\n\n    case \"RENAME_COLLECTION\": {\n      const name: string = action.payload.name.toUpperCase()\n\n      if (collectionLetterExists(state, name)) return state\n\n      const collectionIndex = getCollectionIndex(state, action.payload.name)\n\n      const newCollections: Collection[] = state.collections.map(\n        (collection, index) =>\n          index === collectionIndex\n            ? { name, elements: collection.elements }\n            : collection\n      )\n\n      return { ...state, collections: newCollections }\n    }\n\n    case \"REMOVE_COLLECTION\": {\n      const collectionIndex = getCollectionIndex(state, action.payload.name)\n\n      return {\n        ...state,\n        collections: state.collections.filter(\n          (_, index) => index !== collectionIndex\n        ),\n      }\n    }\n\n    case \"REMOVE_FROM_COLLECTION\": {\n      const collectionIndex = getCollectionIndex(state, action.payload.name)\n\n      const newCollections = state.collections.map((collection, index) => {\n        return index === collectionIndex\n          ? {\n              ...collection,\n              elements: collection.elements.filter(\n                element => element !== action.payload.element\n              ),\n            }\n          : collection\n      })\n\n      const relations = state.relations.map(rel => {\n        if (rel.source === action.payload.name)\n          rel.nodes = rel.nodes.filter(\n            node => node[0] !== action.payload.element\n          )\n\n        if (rel.target === action.payload.name)\n          rel.nodes = rel.nodes.filter(\n            node => node[1] !== action.payload.element\n          )\n\n        return rel\n      })\n\n      return {\n        ...state,\n        collections: newCollections,\n        relations: relations,\n      }\n    }\n\n    case \"ADD_RELATION\": {\n      const name = generateUniqueRelationLetter(state)\n\n      return {\n        ...state,\n        relations: [\n          ...state.relations,\n          { name, source: \"\", target: \"\", nodes: [] },\n        ],\n      }\n    }\n\n    case \"UPDATE_RELATION_SOURCE\": {\n      const relIndex = getRelationIndex(state, action.payload.name)\n\n      if (state.relations[relIndex].source === action.payload.source)\n        return state\n\n      const newRelations = state.relations.map((coll, index) => {\n        return index === relIndex\n          ? { ...coll, source: action.payload.source, nodes: [] }\n          : coll\n      })\n\n      return { ...state, relations: newRelations }\n    }\n\n    case \"UPDATE_RELATION_TARGET\": {\n      const relIndex = getRelationIndex(state, action.payload.name)\n\n      if (state.relations[relIndex].target === action.payload.target)\n        return state\n\n      const newRelations = state.relations.map((coll, index) => {\n        return index === relIndex\n          ? { ...coll, target: action.payload.target, nodes: [] }\n          : coll\n      })\n\n      return { ...state, relations: newRelations }\n    }\n\n    case \"TOGGLE_RELATION_NODE\": {\n      const relIndex = getRelationIndex(state, action.payload.name)\n      const rel = state.relations[relIndex]\n      const [d, r]: OrderedPair<string> = action.payload.node\n\n      const exists = rel.nodes.some(node => node[0] === d && node[1] === r)\n\n      if (exists) {\n        rel.nodes = rel.nodes.filter(node => !(node[0] === d && node[1] === r))\n      } else {\n        rel.nodes = [...rel.nodes, [d, r]]\n      }\n\n      return { ...state }\n    }\n\n    default:\n      return state\n  }\n}\n\n// context\nconst globalContext = createContext<GlobalReducer>({\n  state: global,\n  dispatch: () => {},\n})\n\n// context hook\nexport const useGlobal = () => useContext(globalContext)\n\n// provider\nexport const GlobalProvider = ({ children }: any) => {\n  const [state, dispatch] = useReducer(reducer, global)\n\n  return (\n    <globalContext.Provider value={{ state, dispatch }}>\n      {children}\n    </globalContext.Provider>\n  )\n}\n","import { useCallback, useEffect, useRef } from \"react\"\nimport { Collection } from \"../../interfaces/collection\"\nimport { useGlobal } from \"../../providers/global\"\nimport \"./collectionSet.sass\"\n\ntype Props = {\n  collection: Collection\n}\n\nconst CollectionSet = ({ collection }: Props) => {\n  const { dispatch } = useGlobal()\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  // update name if updated\n  useEffect(() => {\n    inputRef.current!.value = collection.name\n  }, [collection.name])\n\n  // update input on textbox value change\n  const onNameChange = useCallback(\n    e => {\n      if (e.key === \"Enter\") {\n        dispatch({\n          type: \"RENAME_COLLECTION\",\n          payload: { collection: collection.name, name: e.target.value },\n        })\n      }\n    },\n    [dispatch, collection.name]\n  )\n\n  // update input on textbox value change\n  const onAdd = useCallback(\n    e => {\n      if (e.key === \"Enter\") {\n        dispatch({\n          type: \"ADD_TO_COLLECTION\",\n          payload: { collection: collection.name, input: e.target.value },\n        })\n\n        e.target.value = \"\"\n      }\n    },\n    [dispatch, collection.name]\n  )\n\n  // update input on textbox value change\n  const onRemoveCollection = useCallback(() => {\n    dispatch({\n      type: \"REMOVE_COLLECTION\",\n      payload: { name: collection.name },\n    })\n  }, [dispatch, collection.name])\n\n  // update input on textbox value change\n  const onRemoveElement = useCallback(\n    (element: string) => {\n      dispatch({\n        type: \"REMOVE_FROM_COLLECTION\",\n        payload: { name: collection.name, element },\n      })\n    },\n    [dispatch, collection.name]\n  )\n\n  return (\n    <div className='box set'>\n      <header>\n        <input\n          type='text'\n          maxLength={1}\n          defaultValue={collection.name}\n          onKeyUp={onNameChange}\n          ref={inputRef}\n        />\n      </header>\n\n      <main>\n        {collection.elements.map((element, key) => (\n          <div\n            className='element'\n            key={key}\n            onClick={() => onRemoveElement(element)}\n          >\n            <span>{element}</span>\n          </div>\n        ))}\n      </main>\n\n      <div className='add'>\n        <input type='text' onKeyUp={onAdd} />\n      </div>\n\n      <div className='delete'>\n        <button onClick={onRemoveCollection}>Del</button>\n      </div>\n\n      <footer>{collection.elements.length}</footer>\n    </div>\n  )\n}\n\nexport default CollectionSet\n","import { useCallback } from \"react\"\nimport { useGlobal } from \"../../providers/global\"\nimport CollectionSet from \"../collectionSet/CollectionSet\"\nimport \"./collections.sass\"\n\nconst Collections = () => {\n  const { state, dispatch } = useGlobal()\n\n  const addCollection = useCallback(() => {\n    dispatch({ type: \"ADD_COLLECTION\" })\n  }, [dispatch])\n\n  return (\n    <div className='collections'>\n      {state.collections.map((collection, key) => (\n        <CollectionSet key={key} collection={collection} />\n      ))}\n\n      <button className='add' onClick={addCollection}>\n        Add Set\n      </button>\n    </div>\n  )\n}\n\nexport default Collections\n","export type IconName = \"symmetry\" | \"grid\" | \"plus\"\n\ntype IconPack = { [name in IconName]: string }\n\nexport const pack: IconPack = {\n  symmetry: `<svg viewBox=\"0 0 384 384\"><path d=\"M234.667 0H192c0 106.027-85.973 192-192 192v42.667C129.6 234.667 234.667 129.6 234.667 0z\"/><path d=\"M149.333 0h-42.667C106.667 58.88 58.88 106.667 0 106.667v42.667C82.453 149.333 149.333 82.453 149.333 0zM64 0H0v64c35.307 0 64-28.693 64-64zM234.667 384h42.667c0-58.88 47.787-106.667 106.667-106.667v-42.667c-82.454.001-149.334 66.881-149.334 149.334z\"/><path d=\"M149.333 384H192c0-106.027 85.973-192 192-192v-42.667C254.4 149.333 149.333 254.4 149.333 384zM320 384h64v-64c-35.307 0-64 28.693-64 64z\"/></svg>`,\n  grid: `<svg viewBox=\"0 0 408 408\"><path d=\"M0 102h102V0H0v102zm153 306h102V306H153v102zM0 408h102V306H0v102zm0-153h102V153H0v102zm153 0h102V153H153v102zM306 0v102h102V0H306zM153 102h102V0H153v102zm153 153h102V153H306v102zm0 153h102V306H306v102z\"/></svg>`,\n  plus: `<svg viewBox=\"0 0 357 357\"><path d=\"M357 204H204v153h-51V204H0v-51h153V0h51v153h153v51z\"/></svg>`,\n}\n","import { useMemo } from \"react\"\nimport \"./icon.sass\"\n\nimport { pack, IconName } from \"./iconPack\"\n\ntype Props = {\n  name: IconName\n}\n\nconst Icon = ({ name }: Props) => {\n  const icon = useMemo(() => ({ __html: pack[name] }), [name])\n\n  return <div className='icon' dangerouslySetInnerHTML={icon}></div>\n}\n\nexport default Icon\n","import Icon from \"../icon/Icon\"\nimport \"./chips.sass\"\n\nimport { IconName } from \"../icon/iconPack\"\n\ntype Props = {\n  icon: IconName\n  text?: string\n  className?: string\n}\n\nconst Chips = ({ icon, text, className }: Props) => {\n  return (\n    <div className={`chips ${className}`} title={text}>\n      <Icon name={icon} />\n      {text && <main>{text}</main>}\n    </div>\n  )\n}\n\nexport default Chips\n","import { useState, useCallback } from \"react\"\nimport \"./matrix.sass\"\n\nimport type { Relation } from \"../../interfaces/relation\"\n\ntype Props<T = any> = {\n  name: string\n  domain: T[]\n  range: T[]\n  relation: Relation\n  changed?: Function\n}\n\nconst Matrix = ({ name, domain, range, relation, changed }: Props<string>) => {\n  const [hovered, setHovered] = useState({ domain: null, range: null })\n\n  const onMouseHover = useCallback(\n    (d, r) => {\n      setHovered({ domain: d, range: r })\n    },\n    [setHovered]\n  )\n\n  const onMouseLeave = useCallback(() => {\n    setHovered({ domain: null, range: null })\n  }, [setHovered])\n\n  const onToggle = useCallback(\n    (d, r) => {\n      if (changed) {\n        changed(d, r)\n\n        // force to rerender\n        setHovered(h => ({ ...h }))\n      }\n    },\n    [changed, setHovered]\n  )\n\n  const getRelation = useCallback(\n    (d, r) => {\n      return relation.nodes.some(([rd, rr]) => {\n        return d === rd && r === rr\n      })\n    },\n    [relation]\n  )\n\n  // the main section\n  const main = (\n    <main>\n      <div className='domain'>\n        <div></div>\n        {domain.map((d, di) => (\n          <div key={di} className={hovered.domain === d ? \"hovered\" : \"\"}>\n            {d}\n          </div>\n        ))}\n      </div>\n\n      <div className='range'>\n        <div></div>\n        {range.map((r, ri) => (\n          <div key={ri} className={hovered.range === r ? \"hovered\" : \"\"}>\n            {r}\n          </div>\n        ))}\n      </div>\n\n      <div className='table' onMouseLeave={onMouseLeave}>\n        {domain.map((d, di) => (\n          <div className='row' key={di}>\n            {range.map((r, ri) => (\n              <div\n                key={ri}\n                onMouseEnter={() => onMouseHover(d, r)}\n                onClick={() => onToggle(d, r)}\n                title={`(${d}, ${r})`}\n              >\n                <span>{getRelation(d, r) ? \"1\" : \"0\"}</span>\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </main>\n  )\n\n  return (\n    <div className='matrix'>\n      <header>\n        M<span>{name}</span>\n      </header>\n\n      {domain.length > 0 && range.length > 0 ? (\n        main\n      ) : (\n        <div className='empty'>N/A</div>\n      )}\n    </div>\n  )\n}\n\nexport default Matrix\n","import { useEffect, useMemo, useRef } from \"react\"\nimport { OrderedPair, Relation } from \"../../interfaces/relation\"\nimport { useGlobal } from \"../../providers/global\"\nimport \"./diagram.sass\"\n\nconst PI2 = Math.PI * 2\n\ninterface Props {\n  relation: Relation\n}\n\nconst getRandom = (range: number, offset: number = 0) => {\n  if (offset > 0)\n    return Math.max(\n      offset,\n      Math.min(range - offset, Math.floor(Math.random() * range))\n    )\n\n  return Math.floor(Math.random() * range)\n}\n\nconst pointTo = (\n  ctx: CanvasRenderingContext2D,\n  from: OrderedPair<number>,\n  to: OrderedPair<number>,\n  headLength: number = 8,\n  theta: number = 30\n) => {\n  theta = 180 - theta\n\n  const leftDeg = (-theta * Math.PI) / 180\n  const rightDeg = (theta * Math.PI) / 180\n\n  const dx = to[0] - from[0]\n  const dy = to[1] - from[1]\n\n  ctx.beginPath()\n  ctx.moveTo(from[0], from[1])\n  ctx.lineTo(to[0], to[1])\n  ctx.stroke()\n\n  const angle = Math.atan2(dy, dx)\n  const h1x = to[0] + headLength * Math.cos(angle + leftDeg)\n  const h1y = to[1] + headLength * Math.sin(angle + leftDeg)\n  const h2x = to[0] + headLength * Math.cos(angle + rightDeg)\n  const h2y = to[1] + headLength * Math.sin(angle + rightDeg)\n\n  ctx.beginPath()\n  ctx.moveTo(to[0], to[1])\n  ctx.lineTo(h1x, h1y)\n  ctx.stroke()\n\n  ctx.beginPath()\n  ctx.moveTo(to[0], to[1])\n  ctx.lineTo(h2x, h2y)\n  ctx.stroke()\n}\n\nconst Diagram = ({ relation }: Props) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const { state } = useGlobal()\n\n  const domain = useMemo(() => {\n    return state.collections.find(coll => coll.name === relation.source)\n  }, [state.collections, relation.source])\n\n  const range = useMemo(() => {\n    return state.collections.find(coll => coll.name === relation.target)\n  }, [state.collections, relation.target])\n\n  useEffect(() => {\n    const ctx = canvasRef.current!.getContext(\"2d\")!\n    ctx.textAlign = \"center\"\n    ctx.textBaseline = \"middle\"\n    ctx.font = \"14px sans-serif\"\n  }, [])\n\n  useEffect(() => {\n    const canvas = canvasRef.current!\n    const height = canvas.height\n    const width = canvas.width\n    const ctx = canvas.getContext(\"2d\")!\n    const radius = 8\n\n    // ctx.clearRect(0, 0, width, height)\n    ctx.fillStyle = \"#f5f5f5\"\n    ctx.fillRect(0, 0, width, height)\n    ctx.fillStyle = \"#000\"\n\n    if (relation.source === relation.target) {\n      relation.nodes.forEach((node, i) => {\n        const [d] = node\n\n        const x = getRandom(width, radius + 1)\n        const y = getRandom(height, radius + 1)\n\n        ctx.beginPath()\n        ctx.arc(x, y, radius, 0, PI2)\n        ctx.closePath()\n        ctx.stroke()\n\n        ctx.beginPath()\n        ctx.fillText(d, x, y, radius * 2)\n      })\n    } else {\n      const column = width / 4\n      const columnPadding = column * 0.2\n      const verticalCenter = height / 2\n      const sourceFloor = height / domain!.elements.length\n      const targetFloor = height / range!.elements.length\n\n      // ellipse 1\n      ctx.beginPath()\n      ctx.ellipse(\n        column,\n        verticalCenter,\n        column / 2,\n        verticalCenter * 0.9,\n        0,\n        0,\n        PI2\n      )\n      ctx.stroke()\n\n      // ellipse 2\n      ctx.beginPath()\n      ctx.ellipse(\n        column * 3,\n        verticalCenter,\n        column / 2,\n        verticalCenter * 0.9,\n        0,\n        0,\n        PI2\n      )\n      ctx.stroke()\n\n      // source set\n      domain!.elements.forEach((element, i) => {\n        ctx.fillText(element, column, sourceFloor * i + sourceFloor / 2, column)\n      })\n\n      // target set\n      range!.elements.forEach((element, i) => {\n        ctx.fillText(\n          element,\n          column * 3,\n          targetFloor * i + targetFloor / 2,\n          column\n        )\n      })\n\n      relation.nodes.forEach(node => {\n        const [d, r] = node\n        const di = domain!.elements.findIndex(e => e === d)\n        const ri = range!.elements.findIndex(e => e === r)\n\n        pointTo(\n          ctx,\n          [column + columnPadding, sourceFloor * di + sourceFloor / 2],\n          [column * 3 - columnPadding, targetFloor * ri + targetFloor / 2],\n          6\n        )\n      })\n    }\n  }, [relation, state, domain, range])\n\n  return (\n    <div className='diagram'>\n      <canvas ref={canvasRef}></canvas>\n    </div>\n  )\n}\n\nexport default Diagram\n","import { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { useGlobal } from \"../../providers/global\"\nimport \"./selectRelation.sass\"\n\ninterface Props {\n  changed?: (collection: string) => any\n}\n\nconst SelectRelation = ({ changed }: Props) => {\n  const { state } = useGlobal()\n  const [open, setOpen] = useState(false)\n  const [selected, setSelected] = useState(\"\")\n\n  const collections = useMemo(\n    () =>\n      state.collections\n        .map(collection => collection.name)\n        .sort((a, b) => (b === selected ? 0 : -1)),\n    [state, selected]\n  )\n\n  useEffect(() => {\n    window.addEventListener(\"click\", () => {\n      if (open) setOpen(false)\n    })\n  }, [open, setOpen])\n\n  const onClickInside = useCallback(e => {\n    e.stopPropagation()\n  }, [])\n\n  const toggleOpen = useCallback(() => {\n    setOpen(!open)\n  }, [open, setOpen])\n\n  const onSelect = useCallback(\n    (collection: string) => {\n      setSelected(collection)\n      if (changed) changed(collection)\n\n      setOpen(!open)\n    },\n    [open, setOpen, setSelected, changed]\n  )\n\n  return (\n    <div\n      className={`box select-relation ${open ? \"open\" : \"\"}`}\n      onClick={onClickInside}\n    >\n      <header onClick={toggleOpen}>\n        <div className='item'>{selected ? selected : \"#\"}</div>\n      </header>\n\n      <main>\n        {collections.map((collection, key) => (\n          <div className='item' key={key} onClick={() => onSelect(collection)}>\n            {collection}\n          </div>\n        ))}\n      </main>\n    </div>\n  )\n}\n\nexport default SelectRelation\n","import { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { Relation as Rel } from \"../../interfaces/relation\"\nimport { useGlobal } from \"../../providers/global\"\nimport Chips from \"../chips/Chips\"\nimport Matrix from \"../matrix/Matrix\"\nimport Diagram from \"../diagram/Diagram\"\nimport SelectRelation from \"../selectRelation/SelectRelation\"\nimport \"./relation.sass\"\n\ninterface Props {\n  relation: Rel\n}\n\nconst Relation = ({ relation }: Props) => {\n  const { state, dispatch } = useGlobal()\n  const [source, setSource] = useState(\"\")\n  const [target, setTarget] = useState(\"\")\n\n  // domain\n  const domainSet = useMemo(() => {\n    return state.collections.find(\n      collection => collection.name === relation.source\n    )?.elements\n  }, [state, relation.source])\n\n  // range\n  const rangeSet = useMemo(() => {\n    return state.collections.find(\n      collection => collection.name === relation.target\n    )?.elements\n  }, [state, relation.target])\n\n  const isFilled = useMemo(() => {\n    return (\n      domainSet &&\n      rangeSet &&\n      relation.nodes.length === domainSet.length * rangeSet.length\n    )\n  }, [relation.nodes.length, domainSet, rangeSet])\n\n  useEffect(() => {\n    if (relation.source) setSource(relation.source)\n    if (relation.target) setTarget(relation.target)\n  }, [relation.source, relation.target, setSource, setTarget])\n\n  const onSourceChange = useCallback(\n    (collection: string) => {\n      setSource(collection)\n\n      dispatch({\n        type: \"UPDATE_RELATION_SOURCE\",\n        payload: { name: relation.name, source: collection },\n      })\n    },\n    [setSource, dispatch, relation.name]\n  )\n\n  const onTargetChange = useCallback(\n    (collection: string) => {\n      setTarget(collection)\n\n      dispatch({\n        type: \"UPDATE_RELATION_TARGET\",\n        payload: { name: relation.name, target: collection },\n      })\n    },\n    [setTarget, dispatch, relation.name]\n  )\n\n  const onMatrixToggle = useCallback(\n    (d: string, r: string) => {\n      dispatch({\n        type: \"TOGGLE_RELATION_NODE\",\n        payload: { name: relation.name, node: [d, r] },\n      })\n    },\n    [dispatch, relation.name]\n  )\n\n  return (\n    <div className='box column relation'>\n      <header className='flex-align'>\n        <div className='flex-align relation-details'>\n          <input type='text' maxLength={1} defaultValue={relation.name} />\n          =\n          <SelectRelation changed={coll => onSourceChange(coll)} />\n          {\"->\"}\n          <SelectRelation changed={coll => onTargetChange(coll)} />\n        </div>\n\n        <div className='flex-align attributes'>\n          <Chips\n            icon='grid'\n            text='Filled'\n            className={isFilled ? \"on\" : \"off\"}\n          />\n        </div>\n      </header>\n\n      {(!source || !target) && (\n        <main className='not-ready'>Select source and target sets!</main>\n      )}\n\n      {source && target && (\n        <main>\n          <Matrix\n            name={relation.name}\n            relation={relation}\n            domain={domainSet!}\n            range={rangeSet!}\n            changed={onMatrixToggle}\n          />\n\n          <Diagram relation={relation} />\n        </main>\n      )}\n    </div>\n  )\n}\n\nexport default Relation\n","import { useCallback } from \"react\"\nimport { useGlobal } from \"../../providers/global\"\nimport Relation from \"../relation/Relation\"\nimport \"./relations.sass\"\n\nconst Relations = () => {\n  const { state, dispatch } = useGlobal()\n\n  const addRelation = useCallback(() => {\n    dispatch({ type: \"ADD_RELATION\" })\n  }, [dispatch])\n\n  return (\n    <div className='relations'>\n      <main>\n        {state.relations.map((relation, key) => (\n          <Relation relation={relation} key={key} />\n        ))}\n      </main>\n\n      <footer>\n        <button className='add' onClick={addRelation}>\n          Add Relation\n        </button>\n      </footer>\n\n      {/* <pre>{JSON.stringify(state, null, 2)}</pre> */}\n    </div>\n  )\n}\n\nexport default Relations\n","import { GlobalProvider } from \"./providers/global\"\n\nimport Collections from \"./components/collections/Collections\"\nimport Relations from \"./components/relations/Relations\"\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <div className='app'>\n        <Collections />\n        <Relations />\n      </div>\n    </GlobalProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.sass\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}